{
  "title": "Caterpillar",
  "name": "caterpillar",
  "version": "6.0.2",
  "description": "Caterpillar is the ultimate logging system for Deno, Node.js, and Web Browsers. Log levels are implemented to the RFC standard. Log entries can be filtered and piped to various streams, including coloured output to the terminal, the browser's console, and debug files. You can even write your own transforms.",
  "homepage": "https://github.com/bevry/caterpillar",
  "license": "MIT",
  "keywords": [
    "browser",
    "caterpillar",
    "console",
    "debug",
    "deno",
    "deno-edition",
    "deno-entry",
    "denoland",
    "es2019",
    "log",
    "logger",
    "logging",
    "module",
    "node",
    "stream",
    "transform",
    "typed",
    "types",
    "typescript"
  ],
  "badges": {
    "list": [
      "travisci",
      "npmversion",
      "npmdownloads",
      "daviddm",
      "daviddmdev",
      "---",
      "githubsponsors",
      "patreon",
      "flattr",
      "liberapay",
      "buymeacoffee",
      "opencollective",
      "crypto",
      "paypal",
      "wishlist"
    ],
    "config": {
      "githubSponsorsUsername": "balupton",
      "buymeacoffeeUsername": "balupton",
      "cryptoURL": "https://bevry.me/crypto",
      "flattrUsername": "balupton",
      "liberapayUsername": "bevry",
      "opencollectiveUsername": "bevry",
      "patreonUsername": "bevry",
      "paypalURL": "https://bevry.me/paypal",
      "wishlistURL": "https://bevry.me/wishlist",
      "travisTLD": "com",
      "githubUsername": "bevry",
      "githubRepository": "caterpillar",
      "githubSlug": "bevry/caterpillar",
      "npmPackageName": "caterpillar"
    }
  },
  "funding": "https://bevry.me/fund",
  "author": "2012+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me), 2011 Benjamin Lupton <b@lupton.cc> (https://balupton.com)",
  "maintainers": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)"
  ],
  "contributors": [
    "Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)",
    "Tim Helfensd√∂rfer <tim@visualappeal.de> (https://github.com/thelfensdrfer)",
    "t-visualappeal (https://github.com/t-visualappeal)"
  ],
  "bugs": {
    "url": "https://github.com/bevry/caterpillar/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bevry/caterpillar.git"
  },
  "engines": {
    "node": ">=10"
  },
  "editions": [
    {
      "description": "TypeScript source code with Import for modules",
      "directory": "source",
      "entry": "index.ts",
      "tags": [
        "typescript",
        "import"
      ],
      "engines": false
    },
    {
      "description": "TypeScript compiled against ESNext for Node.js 14 with Require for modules",
      "directory": "edition-esnext",
      "entry": "index.js",
      "tags": [
        "javascript",
        "esnext",
        "require"
      ],
      "engines": {
        "node": "14",
        "browsers": false
      }
    },
    {
      "description": "TypeScript compiled against ES2019 for Node.js 10 || 12 || 13 || 14 with Require for modules",
      "directory": "edition-es2019",
      "entry": "index.js",
      "tags": [
        "javascript",
        "es2019",
        "require"
      ],
      "engines": {
        "node": "10 || 12 || 13 || 14",
        "browsers": false
      }
    },
    {
      "description": "TypeScript compiled against ES2019 for web browsers with Import for modules",
      "directory": "edition-browsers",
      "entry": "index.js",
      "tags": [
        "javascript",
        "import"
      ],
      "engines": {
        "node": false,
        "browsers": "defaults"
      }
    },
    {
      "description": "TypeScript compiled against ESNext for Node.js with Import for modules",
      "directory": "edition-node-esm",
      "entry": "index.js",
      "tags": [
        "javascript",
        "import"
      ],
      "engines": {
        "node": true,
        "browsers": false
      }
    },
    {
      "description": "TypeScript source code made to be compatible with Deno",
      "directory": "edition-deno",
      "entry": "index.ts",
      "tags": [
        "typescript",
        "import",
        "deno"
      ],
      "engines": {
        "deno": true,
        "browsers": true
      }
    }
  ],
  "types": "./compiled-types/",
  "type": "module",
  "main": "index.cjs",
  "exports": {
    "node": {
      "import": "./edition-node-esm/index.js",
      "default": "./index.cjs",
      "require": "./edition-esnext/index.js"
    },
    "browser": {
      "import": "./edition-browsers/index.js"
    }
  },
  "browser": "edition-browsers/index.js",
  "module": "edition-browsers/index.js",
  "dependencies": {
    "@bevry/ansi": "^1.1.0",
    "editions": "^3.15.0",
    "get-current-line": "^5.13.0",
    "rfc-log-levels": "^3.11.0"
  },
  "devDependencies": {
    "@bevry/update-contributors": "^1.14.0",
    "@typescript-eslint/eslint-plugin": "^3.7.0",
    "@typescript-eslint/parser": "^3.7.0",
    "assert-helpers": "^6.18.0",
    "eslint": "^7.5.0",
    "eslint-config-bevry": "^3.17.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-prettier": "^3.1.4",
    "kava": "^5.9.0",
    "make-deno-edition": "^0.15.0",
    "prettier": "^2.0.5",
    "projectz": "^2.12.0",
    "surge": "^0.21.6",
    "typedoc": "^0.17.8",
    "typescript": "^3.9.7",
    "valid-directory": "^2.7.0",
    "valid-module": "^1.11.0"
  },
  "scripts": {
    "our:clean": "rm -Rf ./docs ./edition* ./es2015 ./es5 ./out ./.next",
    "our:compile": "npm run our:compile:deno && npm run our:compile:edition-browsers && npm run our:compile:edition-es2019 && npm run our:compile:edition-esnext && npm run our:compile:edition-node-esm && npm run our:compile:types",
    "our:compile:deno": "make-deno-edition --attempt",
    "our:compile:edition-browsers": "tsc --module ESNext --target ES2019 --outDir ./edition-browsers --project tsconfig.json && ( test ! -d edition-browsers/source || ( mv edition-browsers/source edition-temp && rm -Rf edition-browsers && mv edition-temp edition-browsers ) )",
    "our:compile:edition-es2019": "tsc --module commonjs --target ES2019 --outDir ./edition-es2019 --project tsconfig.json && ( test ! -d edition-es2019/source || ( mv edition-es2019/source edition-temp && rm -Rf edition-es2019 && mv edition-temp edition-es2019 ) ) && echo '{\"type\": \"commonjs\"}' > edition-es2019/package.json",
    "our:compile:edition-esnext": "tsc --module commonjs --target ESNext --outDir ./edition-esnext --project tsconfig.json && ( test ! -d edition-esnext/source || ( mv edition-esnext/source edition-temp && rm -Rf edition-esnext && mv edition-temp edition-esnext ) ) && echo '{\"type\": \"commonjs\"}' > edition-esnext/package.json",
    "our:compile:edition-node-esm": "tsc --module ESNext --target ESNext --outDir ./edition-node-esm --project tsconfig.json && ( test ! -d edition-node-esm/source || ( mv edition-node-esm/source edition-temp && rm -Rf edition-node-esm && mv edition-temp edition-node-esm ) ) && echo '{\"type\": \"module\"}' > edition-node-esm/package.json",
    "our:compile:types": "tsc --project tsconfig.json --emitDeclarationOnly --declaration --declarationMap --declarationDir ./compiled-types && ( test ! -d compiled-types/source || ( mv compiled-types/source edition-temp && rm -Rf compiled-types && mv edition-temp compiled-types ) )",
    "our:deploy": "echo no need for this project",
    "our:meta": "npm run our:meta:contributors && npm run our:meta:docs && npm run our:meta:projectz",
    "our:meta:contributors": "update-contributors",
    "our:meta:docs": "npm run our:meta:docs:typedoc",
    "our:meta:docs:typedoc": "rm -Rf ./docs && typedoc --mode file --exclude '**/+(*test*|node_modules)' --excludeExternals --name \"$npm_package_name\" --readme ./README.md --out ./docs ./source",
    "our:meta:projectz": "projectz compile",
    "our:release": "npm run our:release:prepare && npm run our:release:check-changelog && npm run our:release:check-dirty && npm run our:release:tag && npm run our:release:push",
    "our:release:check-changelog": "cat ./HISTORY.md | grep v$npm_package_version || (echo add a changelog entry for v$npm_package_version && exit -1)",
    "our:release:check-dirty": "git diff --exit-code",
    "our:release:prepare": "npm run our:clean && npm run our:compile && npm run our:test && npm run our:meta",
    "our:release:push": "git push origin master && git push origin --tags",
    "our:release:tag": "export MESSAGE=$(cat ./HISTORY.md | sed -n \"/## v$npm_package_version/,/##/p\" | sed 's/## //' | awk 'NR>1{print buf}{buf = $0}') && test \"$MESSAGE\" || (echo 'proper changelog entry not found' && exit -1) && git tag v$npm_package_version -am \"$MESSAGE\"",
    "our:setup": "npm run our:setup:install",
    "our:setup:install": "npm install",
    "our:test": "npm run our:verify && npm test",
    "our:verify": "npm run our:verify:directory && npm run our:verify:eslint && npm run our:verify:module && npm run our:verify:prettier",
    "our:verify:directory": "valid-directory",
    "our:verify:eslint": "eslint --fix --ignore-pattern '**/*.d.ts' --ignore-pattern '**/vendor/' --ignore-pattern '**/node_modules/' --ext .mjs,.js,.jsx,.ts,.tsx ./source",
    "our:verify:module": "valid-module",
    "our:verify:prettier": "prettier --write .",
    "test": "node ./test.cjs"
  },
  "eslintConfig": {
    "extends": [
      "bevry"
    ],
    "rules": {
      "class-methods-use-this": "off"
    }
  },
  "prettier": {
    "semi": false,
    "singleQuote": true
  },
  "deno": "edition-deno/index.ts"
}
